# This file defines a set of backend processing providers. These providers are capable of running
# WDL tasks and providing results back to cromwell. 
#
# This file is designed to be included in a larger config file
backend {
    providers {

        # The apptainer provider is a container-based provider
        apptainer {
            # The SharedFileSystem provider
            actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

            # TODO: Apptainer provides a cgroup-based approach to resource limitation:
            # https://apptainer.org/docs/user/latest/cgroups.html. This can be integrated into 
            # a non-HPC backend to limit cpu, memory, etc.
            config {  
                run-in-background = true
                # Attributes that will be consumed from task runtime section.
                runtime-attributes = """
                    String? docker
                    String? docker_volumes
                """
                # Submit string when there is no "docker" runtime attribute.
                submit = """
                    submit = "/usr/bin/env bash ${script}"
                """
                # How to run a job that includes a "docker" runtime attribute.
                submit-docker = """
                    apptainer exec -C --bind ${cwd}:${docker_cwd} ~{"--bind" + docker_volumes} ${job_shell} ${script}
                """
        }

        # The singularity provider is a container-based provider
        singularity {
            # The SharedFileSystem provider
            actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

            config {  
                run-in-background = true
                # Attributes that will be consumed from task runtime section.
                runtime-attributes = """
                    String? docker
                    String? docker_volumes
                """
                # Submit string when there is no "docker" runtime attribute.
                submit = """
                    submit = "/usr/bin/env bash ${script}"
                """
                # How to run a job that includes a "docker" runtime attribute.
                submit-docker = """
                    singularity exec -C --bind ${cwd}:${docker_cwd} ~{"--bind" + docker_volumes} ${job_shell} ${script}
                """
            }
        }

        org.moffitt.slurm-apptainer {
            actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"                                                                                     
            config {
                runtime-attributes = """
                    Int runtime_minutes = 600
                    String pbs_walltime = "24:00"
                    Int cpus = 2
                    Int pbs_cpu = 1
                    Int requested_memory_mb_per_core = 8000
                    Int memory_mb = 1000
                    String? docker
                    String? docker_volumes
                """

                submit = """
                    sbatch \
                        -J ${job_name} \
                        -D ${cwd} \
                        -o ${out} \
                        -e ${err} \
                        -t ${pbs_walltime} \
                        ${"-c " + pbs_cpu} \
                        --mem=${memory_mb} \
                        --wrap "/bin/bash ${script}"
                """

                submit-docker = """
                    # Would like this to be an image file locally, or prepend the docker://
                    # This should be the case for everybody.
                    # Worst case would be to just look for a sif extension and go there, otherwise
                    # assume docker.
                    # Should this be a script?
                    # Build the Docker image into a singularity image
                    IMAGE=/SINGULARITY_IMAGES/${docker}.sif
                    #IMAGE=${cwd}/${docker}.sif
                    #singularity build $IMAGE docker://${docker}

                    # Submit the script to SLURM
                    sbatch \
                        -J ${job_name} \
                        -D ${cwd} \
                        -o ${cwd}/execution/stdout \
                        -e ${cwd}/execution/stderr \
                        -t ${pbs_walltime} \
                        ${"-c " + pbs_cpu} \
                        --mem=${memory_mb} \
                        --wrap "apptainer exec -C --bind ${cwd}:${docker_cwd} ~{"--bind" + docker_volumes} $IMAGE ${job_shell} ${docker_script}"
                """

                kill = "scancel ${job_id}"
                check-alive = "squeue -j ${job_id}"
                job-id-regex = "Submitted batch job (\\d+).*"
                concurrent-job-limit = 25
      }
    }

}