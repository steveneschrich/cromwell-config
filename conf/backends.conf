# This file defines a set of backend processing providers. These providers are capable of running
# WDL tasks and providing results back to cromwell. 
#
# This file is designed to be included in a larger config file
backend {
    providers {

        # The apptainer provider is a container-based provider. This definition forces the
        # use of apptainer. By default if no docker is provided, an ubuntu image is used for
        # evaluation of the job.
        apptainer {
            # The SharedFileSystem provider
            actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

            # TODO: Apptainer provides a cgroup-based approach to resource limitation:
            # https://apptainer.org/docs/user/latest/cgroups.html. This can be integrated into 
            # a non-HPC backend to limit cpu, memory, etc.
            config {  
                run-in-background = true
                # Attributes that will be consumed from task runtime section.
                runtime-attributes = """
                    String? docker = "ubuntu:latest"  # Use a default container if none specified.
                    String? docker_volumes 

                """
                # Submit string when there is no "docker" runtime attribute.
                submit = """
                    apptainer exec -C --bind ${cwd}:${cwd} ${"--bind" + docker_volumes} docker://${docker} ${job_shell} ${script}
                """
                submit-docker = """
                    apptainer exec -C --bind ${cwd}:${docker_cwd} ${"--bind " + docker_volumes} docker://${docker} ${job_shell} ${docker_script}
                """
            }
        }

        # The singularity provider is a container-based provider
        singularity {
            # The SharedFileSystem provider
            actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

            config {  
                run-in-background = true
                # Attributes that will be consumed from task runtime section.
                runtime-attributes = """
                    String? docker = "ubuntu:latest"
                    String? docker_volumes

                """
                # Submit string when there is no "docker" runtime attribute.
                submit = """
                    singularity exec -C --bind ${cwd}:${cwd} ${"--bind" + docker_volumes} docker://${docker} ${job_shell} ${script}
                """
                # How to run a job that includes a "docker" runtime attribute.
                submit-docker = """
                    singularity exec -C --bind ${cwd}:${docker_cwd} ${"--bind " + docker_volumes} docker://${docker} ${job_shell} ${docker_script}
                """
            }
        }

        
        # Per the standard (https://cromwell.readthedocs.io/en/stable/RuntimeAttributes/):
        # cpu
        # memory
        # docker
        # For cluster config, we adopt the standards of biowdl where possible.
        # time_minutes
        slurm-apptainer {
            actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"                                                                                     
            config {
                # NOTE: Although tasks will set the 'memory' attribute (as a string with a size), this
                # appears to be converted into memory_mb and memory_gb (float) by this point. So we ignore
                # the memory and use memory_gb as the parameter. This is then truncated to integer with the
                # ceil() function since that's what slurm needs.
                #
                # docker_shell: This variable allows you to specify the shell to use within the docker container. It
                # may vary from container to container which makes it relatively incompatible with the overall backend
                # job_shell. 
                runtime-attributes = """
                    Int time_minutes = 600
                    Int cpu = 1
                    Float? memory_gb = 2
                    String? docker = "ubuntu:latest"
                    String? docker_volumes
                    String? docker_shell="/bin/bash"
                """

                submit = """
                    sbatch \
                        -J ${job_name} \
                        -D ${cwd} \
                        -o ${out} \
                        -e ${err} \
                        -t ${time_minutes} \
                        ${"-c " + cpu} \
                        ${"--mem=" + ceil(memory_gb) + "G"} \
                        --wrap "apptainer exec -C --bind ${cwd}:${cwd} ${"--bind" + docker_volumes} docker://${docker} ${docker_shell} ${script}"
                """

                submit-docker = """
                    # Submit the script to SLURM
                    sbatch \
                        -J ${job_name} \
                        -D ${cwd} \
                        -o ${cwd}/execution/stdout \
                        -e ${cwd}/execution/stderr \
                        -t ${time_minutes} \
                        ${"-c " + cpu} \
                        ${"--mem=" + ceil(memory_gb) + "G"} \
                        --wrap "apptainer exec -C --bind ${cwd}:${docker_cwd} ${"--bind " + docker_volumes} docker://${docker} ${docker_shell} ${docker_script}"
                """

                kill = "scancel ${job_id}"
                kill-docker = "scancel ${job_id}"
                check-alive = "squeue -j ${job_id}"
                job-id-regex = "Submitted batch job (\\d+).*"
                concurrent-job-limit = 25
            }
        }
    }
}